generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  phone         String
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizations Organization[]

  @@index([email, username])
  @@map("users")
}

model Organization {
  id                 String             @id @default(uuid())
  name               String
  phone              String
  user               User               @relation(fields: [userId], references: [id])
  userId             String
  createdAt          DateTime           @default(now())
  materialPurchases  MaterialPurchase[]
  expensePurchases   ExpensePurchase[]
  sales              Sale[]
  productionOrders   ProductionOrder[]
  customers          Customer[]
  suppliers          Supplier[]
  materials          Material[]
  expenses           Expense[]
  products           Product[]
  staff              Staff[]
  expenseCategories  ExpenseCategory[]
  materialCategories MaterialCategory[]
  productCategories  ProductCategory[]
  billOfMaterials    BillOfMaterials[]

  @@unique([userId, name])
  @@map("organizations")
}

model Staff {
  id             String       @id @default(uuid())
  email          String       @unique
  username       String       @unique
  password       String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@unique([organizationId, email])
  @@unique([organizationId, username])
  @@map("staff")
}

enum PurchaseType {
  Material
  Expense
}

model MaterialPurchase {
  id             String       @id @default(uuid())
  quantity       Float
  price          Float
  purchaseType   PurchaseType @default(Material)
  supplier       Supplier     @relation(fields: [supplierId], references: [id])
  supplierId     String
  material       Material     @relation(fields: [materialId], references: [id])
  materialId     String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("material_purchases")
}

model ExpensePurchase {
  id             String       @id @default(uuid())
  price          Float
  purchaseType   PurchaseType @default(Material)
  supplier       Supplier     @relation(fields: [supplierId], references: [id])
  supplierId     String
  expense        Expense      @relation(fields: [expenseId], references: [id])
  expenseId      String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("expense_purchases")
}

model Sale {
  id             String       @id @default(uuid())
  quantity       Float        @default(0.00)
  price          Float        @default(0.00)
  product        Product      @relation(fields: [productId], references: [id])
  productId      String
  customer       Customer     @relation(fields: [customerId], references: [id])
  customerId     String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("sales")
}

model Supplier {
  id                String             @id @default(uuid())
  name              String
  address           String?
  phone             String
  accountPayable    Float              @default(0.00)
  createdAt         DateTime           @default(now())
  organization      Organization       @relation(fields: [organizationId], references: [id])
  organizationId    String
  materialPurchases MaterialPurchase[]
  expensePurchases  ExpensePurchase[]

  @@unique([organizationId, name])
  @@map("suppliers")
}

model Customer {
  id                String       @id @default(uuid())
  name              String
  address           String?
  phone             String
  accountReceivable Float        @default(0.00)
  createdAt         DateTime     @default(now())
  organization      Organization @relation(fields: [organizationId], references: [id])
  organizationId    String
  sales             Sale[]

  @@unique([organizationId, name])
  @@map("customers")
}

model Material {
  id             String             @id @default(uuid())
  name           String
  price          Float              @default(0.00)
  quantity       Float              @default(0.00)
  notes          String?
  category       MaterialCategory   @relation(fields: [categoryId], references: [id])
  categoryId     String
  createdAt      DateTime           @default(now())
  organization   Organization       @relation(fields: [organizationId], references: [id])
  organizationId String
  purchases      MaterialPurchase[]
  products       BillOfMaterials[]

  @@unique([organizationId, name])
  @@map("materials")
}

model MaterialCategory {
  id             String       @id @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  materials      Material[]

  @@unique([organizationId, name])
  @@map("material_categories")
}

model Expense {
  id             String            @id @default(uuid())
  name           String
  price          Float             @default(0.00)
  notes          String?
  category       ExpenseCategory   @relation(fields: [categoryId], references: [id])
  categoryId     String
  createdAt      DateTime          @default(now())
  organization   Organization      @relation(fields: [organizationId], references: [id])
  organizationId String
  purchases      ExpensePurchase[]

  @@unique([organizationId, name])
  @@map("expenses")
}

model ExpenseCategory {
  id             String       @id @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  expenses       Expense[]

  @@unique([organizationId, name])
  @@map("expense_categories")
}

model Product {
  id                  String            @id @default(uuid())
  name                String
  price               Float             @default(0.00)
  quantity            Float             @default(0.00)
  profitPercent       Float?
  indirectCostPercent Float?
  notes               String?
  imagePath           String?
  category            ProductCategory   @relation(fields: [categoryId], references: [id])
  categoryId          String
  createdAt           DateTime          @default(now())
  organization        Organization      @relation(fields: [organizationId], references: [id])
  organizationId      String
  sales               Sale[]
  materials           BillOfMaterials[]
  productionOrders    ProductionOrder[]

  @@unique([organizationId, name])
  @@map("products")
}

model ProductCategory {
  id             String       @id @default(uuid())
  name           String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  products       Product[]

  @@unique([organizationId, name])
  @@map("product_categories")
}

model BillOfMaterials {
  material       Material     @relation(fields: [materialId], references: [id])
  materialId     String
  product        Product      @relation(fields: [productId], references: [id])
  productId      String
  quantity       Float
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@id([materialId, productId])
  @@map("bill_of_materials")
}

enum Status {
  pending
  executing
  fulfilled
  cancelled
}

model ProductionOrder {
  id             String       @id @default(uuid())
  count          Int
  status         Status       @default(pending)
  product        Product      @relation(fields: [productId], references: [id])
  productId      String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("production_orders")
}
