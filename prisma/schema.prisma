generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  username      String         @unique
  phone         String
  password      String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  organizations Organization[]

  @@index([email, username])
  @@map("users")
}

model Organization {
  id                     String                   @id @default(uuid())
  name                   String
  phone                  String
  userId                 String
  user                   User                     @relation(fields: [userId], references: [id])
  createdAt              DateTime                 @default(now())
  sales                  Sale[]
  productionOrders       ProductionOrder[]
  customers              Customer[]
  suppliers              Supplier[]
  products               Product[]
  staff                  Staff[]
  productCategories      ProductCategory[]
  productBillOfMaterials ProductBillOfMaterials[]
  invoices               Invoice[]
  purchases              Purchase[]
  purchaseItems          PurchaseItem[]
  purchaseItemCategories PurchaseItemCategory[]

  @@unique([userId, name])
  @@map("organizations")
}

model Staff {
  id             String       @id @default(uuid())
  email          String       @unique
  username       String       @unique
  password       String
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, email])
  @@unique([organizationId, username])
  @@map("staff")
}

model Invoice {
  id             String       @id @default(uuid())
  invoiceNumber  String       @default(cuid())
  totalAmount    Float
  effectiveDate  String
  supplierId     String
  organizationId String
  createdAt      DateTime     @default(now())
  supplier       Supplier     @relation(fields: [supplierId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])
  purchases      Purchase[]

  @@map("invoices")
}

model Purchase {
  id             String       @id @default(uuid())
  quantity       Float
  price          Float
  invoiceId      String
  purchaseItemId String
  organizationId String
  invoice        Invoice      @relation(fields: [invoiceId], references: [id])
  purchaseItem   PurchaseItem @relation(fields: [purchaseItemId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("purchases")
}

enum PurchaseItemTypes {
  storable
  service
  consumable
}

model PurchaseItem {
  id             String               @id @default(uuid())
  name           String
  type           PurchaseItemTypes
  price          Float                @default(0.00)
  notes          String?
  categoryId     String
  organizationId String
  createdAt      DateTime             @default(now())
  category       PurchaseItemCategory @relation(fields: [categoryId], references: [id])
  organization   Organization         @relation(fields: [organizationId], references: [id])
  purchases      Purchase[]
  inventory      Inventory?

  @@unique([organizationId, name])
  @@map("purchase_items")
}

model Inventory {
  id         String                   @id @default(uuid())
  materialId String                   @unique
  quantity   Float                    @default(0.00)
  material   PurchaseItem             @relation(fields: [materialId], references: [id])
  products   ProductBillOfMaterials[]

  @@map("inventory")
}

model ProductBillOfMaterials {
  productId      String
  materialId     String
  quantity       Float
  organizationId String
  material       Inventory    @relation(fields: [materialId], references: [materialId])
  product        Product      @relation(fields: [productId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([materialId, productId])
  @@map("product_bill_of_materials")
}

model Product {
  id                  String                   @id @default(uuid())
  name                String
  price               Float                    @default(0.00)
  quantity            Float                    @default(0.00)
  profitPercent       Float?
  indirectCostPercent Float?
  notes               String?
  imagePath           String?
  categoryId          String
  organizationId      String
  createdAt           DateTime                 @default(now())
  organization        Organization             @relation(fields: [organizationId], references: [id])
  category            ProductCategory          @relation(fields: [categoryId], references: [id])
  sales               Sale[]
  materials           ProductBillOfMaterials[]
  productionOrders    ProductionOrder[]

  @@unique([organizationId, name])
  @@map("products")
}

model Sale {
  id             String       @id @default(uuid())
  quantity       Float        @default(0.00)
  price          Float        @default(0.00)
  productId      String
  customerId     String
  organizationId String
  createdAt      DateTime     @default(now())
  product        Product      @relation(fields: [productId], references: [id])
  customer       Customer     @relation(fields: [customerId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("sales")
}

model Supplier {
  id             String       @id @default(uuid())
  name           String
  address        String?
  phone          String
  accountPayable Float        @default(0.00)
  organizationId String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  invoices       Invoice[]

  @@unique([organizationId, name])
  @@map("suppliers")
}

model Customer {
  id                String       @id @default(uuid())
  name              String
  address           String?
  phone             String
  accountReceivable Float        @default(0.00)
  organizationId    String
  createdAt         DateTime     @default(now())
  organization      Organization @relation(fields: [organizationId], references: [id])
  sales             Sale[]

  @@unique([organizationId, name])
  @@map("customers")
}

model PurchaseItemCategory {
  id             String         @id @default(uuid())
  name           String
  createdAt      DateTime       @default(now())
  organizationId String
  organization   Organization   @relation(fields: [organizationId], references: [id])
  purchaseItems  PurchaseItem[]

  @@unique([organizationId, name])
  @@map("categories")
}

model ProductCategory {
  id             String       @id @default(uuid())
  name           String
  organizationId String
  createdAt      DateTime     @default(now())
  organization   Organization @relation(fields: [organizationId], references: [id])
  products       Product[]

  @@unique([organizationId, name])
  @@map("product_categories")
}

enum Status {
  pending
  executing
  fulfilled
  cancelled
}

model ProductionOrder {
  id             String       @id @default(uuid())
  count          Int
  status         Status       @default(pending)
  productId      String
  organizationId String
  createdAt      DateTime     @default(now())
  product        Product      @relation(fields: [productId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@map("production_orders")
}
